import os
import re
from base64 import b64encode
from shutil import copy
from .utils import copytree


class Command(object):

    def collect_static(self):
        """ to move the statics into the project """
        import settings
        dist = settings.STATIC_PATH
        static = os.path.join(os.path.abspath(os.path.dirname(__file__)), "static")
        copytree(static, dist)

    def init(self, name):
        """ create project """
        name = self.__get_valid_name(name)
        project_dir = os.path.join(os.getcwd(), name)
        base_dir = os.path.abspath(os.path.dirname(__file__))
        if not os.path.exists(project_dir):
            os.makedirs(project_dir)
            for file_name in ("settings.py", "run.py"):
                file_path = os.path.join(base_dir, file_name)
                dist_path = os.path.join(project_dir, file_name)
                copy(file_path, dist_path)
                if file_name == "settings.py":
                    with open(dist_path) as f:
                        settings_data = f.read()
                    for conf_item, param in [
                        ('PROJECT_NAME', name),
                        ('SECRET_KEY', b64encode(os.urandom(32)).decode('utf-8')),
                        ('CSRF_SESSION_KEY', b64encode(os.urandom(32)).decode('utf-8')),
                    ]:
                        settings_data = re.sub(
                            r"%s\s?=[^\n]+" % conf_item,
                            "%s = \'%s\'" % (conf_item, param),
                            settings_data
                        )
                    with open(dist_path, "w+") as f:
                        f.write(settings_data)
            print("Project %s created" % name)
        else:
            print("Path %s exists" % project_dir)

    def start_app(self, name):
        """ create an application """
        name = self.__get_valid_name(name)
        project_dir = os.getcwd()
        import settings
        app_exists = bool(list(filter(lambda x: name in x, settings.APPS)))
        if not app_exists:
            app_dir = os.path.join(project_dir, name)
            if not os.path.exists(app_dir):
                os.mkdir(app_dir)
                for file_name in [
                    "__init__.py",
                    "models.py",
                    "views.py",
                    "urls.py",
                    "serializers.py"
                ]:
                    with open(os.path.join(app_dir, file_name), "w+") as f:
                        f.write("# generated by flask-rest application")
                        f.write("\n")
                        if file_name == "views.py":
                            f.write("from flask_rest.decorators import create_decorator_register_url")
                            f.write("\n\n")
                            f.write("register_url = create_decorator_register_url()")
                            f.write("\n")
                        if file_name == "urls.py":
                            f.write("from .views import register_url")
                            f.write("\n\n")
                            f.write("urls = register_url.all")
                            f.write("\n")
                        if file_name == "serializers.py":
                            f.write("from flask_rest.serializers import ModelSerializer, SerializerMethodField")
                            f.write("\n")

                settings_path = os.path.join(project_dir, 'settings.py')

                with open(settings_path) as f:
                    settings_data = f.read()

                settings_data = re.sub(
                    r"APPS\s*=\s*[\(\[]([\w\W]+)?[\]\)]",
                    "APPS = [\n{tab}('/{pref}', '{app}'),\\1]".format(
                        tab=' '*4,
                        app=name,
                        pref=name.replace("_", "-")
                    ),
                    settings_data
                )

                with open(settings_path, "w+") as f:
                    f.write(settings_data)

                print("%s created" % name)

            else:
                print("dir %s exists" % name)
        else:
            print("app %s already created" % name)

    def __get_valid_name(self, name):
        name = re.sub(r"^\d+|[^_\w\d]", "", str(name).replace("-", "_"))
        if len(name.replace("_", "")) > 1 and len(name) < 21:
            return name

        print("project name is not valid")
        exit()
